// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dR85fuYvjADGR8ksD8Rk4V
// Component: 27kvjbPh0dG1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Editable from "../../Editable"; // plasmic-import: Fvgpkf4ai71D/component
import TextInput from "../../TextInput"; // plasmic-import: gxI9w17xJzJp/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { inputHelpers as AntdInput_Helpers } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import TextInput2 from "../../TextInput"; // plasmic-import: 3r4TxCxZZuIK5/component
import Button from "../../Button"; // plasmic-import: VGxgH9M5y5qbv/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_1V0TfIi4OQxU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 1v0TFIi4oQxU/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic_plasmic_rich_components.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic_legacy_feed_page_designs.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic_copy_of_copy_of_ssg_app_retry_3.module.css"; // plasmic-import: dR85fuYvjADGR8ksD8Rk4V/projectcss
import sty from "./PlasmicSqueezeVariant2.module.css"; // plasmic-import: 27kvjbPh0dG1/css

import SearchsvgIcon from "../legacy_feed_page_designs/icons/PlasmicIcon__Searchsvg"; // plasmic-import: CRyUolhDoWvR1TU/icon
import ChecksvgIcon from "../legacy_feed_page_designs/icons/PlasmicIcon__Checksvg"; // plasmic-import: JKXZQCGXOZJezuA/icon

createPlasmicElementProxy;

export type PlasmicSqueezeVariant2__VariantMembers = {};
export type PlasmicSqueezeVariant2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSqueezeVariant2__VariantsArgs;
export const PlasmicSqueezeVariant2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSqueezeVariant2__ArgsType = {
  pageId?: number;
  editable?: string;
};
type ArgPropType = keyof PlasmicSqueezeVariant2__ArgsType;
export const PlasmicSqueezeVariant2__ArgProps = new Array<ArgPropType>(
  "pageId",
  "editable"
);

export type PlasmicSqueezeVariant2__OverridesType = {
  root?: Flex__<"div">;
  desktop?: Flex__<"div">;
  columns?: Flex__<"div">;
  editableLogoLogo?: Flex__<typeof Editable>;
  logo?: Flex__<typeof PlasmicImg__>;
  editImage53?: Flex__<typeof TextInput>;
  editableText1?: Flex__<typeof Editable>;
  text1?: Flex__<"div">;
  editText1R?: Flex__<typeof TextInput>;
  editableText2?: Flex__<typeof Editable>;
  text2?: Flex__<"div">;
  editText2R?: Flex__<typeof TextInput>;
  editableText3?: Flex__<typeof Editable>;
  text3?: Flex__<"div">;
  editText3R?: Flex__<typeof TextInput>;
  form?: Flex__<typeof FormWrapper>;
  formField?: Flex__<typeof FormItemWrapper>;
  input?: Flex__<typeof AntdInput>;
  input2?: Flex__<typeof AntdInput>;
  button?: Flex__<typeof AntdButton>;
  squeezeC1Cta?: Flex__<"div">;
  text4?: Flex__<typeof TextInput2>;
  text5?: Flex__<typeof TextInput2>;
  text6?: Flex__<typeof Button>;
  editableText6?: Flex__<typeof Editable>;
  editText6R?: Flex__<typeof TextInput>;
  disclaimer?: Flex__<"div">;
  editableImage1?: Flex__<typeof Editable>;
  image1?: Flex__<typeof PlasmicImg__>;
  editImage1R?: Flex__<typeof TextInput>;
  editableText7?: Flex__<typeof Editable>;
  text7?: Flex__<"div">;
  editText7R?: Flex__<typeof TextInput>;
  editableText8?: Flex__<typeof Editable>;
  text8?: Flex__<"div">;
  editText8R?: Flex__<typeof TextInput>;
  iconValue1?: Flex__<"div">;
  editableImage2?: Flex__<typeof Editable>;
  image2?: Flex__<typeof PlasmicImg__>;
  editImage2R?: Flex__<typeof TextInput>;
  editableText9?: Flex__<typeof Editable>;
  text9?: Flex__<"div">;
  editText9R?: Flex__<typeof TextInput>;
  iconValue2?: Flex__<"div">;
  editableImage3?: Flex__<typeof Editable>;
  image3?: Flex__<typeof PlasmicImg__>;
  editImage3R?: Flex__<typeof TextInput>;
  editableText10?: Flex__<typeof Editable>;
  text10?: Flex__<"div">;
  editText10R?: Flex__<typeof TextInput>;
  iconValue3?: Flex__<"div">;
  editableImage4?: Flex__<typeof Editable>;
  image4?: Flex__<typeof PlasmicImg__>;
  editImage4R?: Flex__<typeof TextInput>;
  editableText11?: Flex__<typeof Editable>;
  text11?: Flex__<"div">;
  editText11R?: Flex__<typeof TextInput>;
  squeezeC2CtaH1?: Flex__<"div">;
  squeezeC2CtaH2?: Flex__<"div">;
  watchers?: Flex__<"div">;
  text12?: Flex__<"div">;
  editText123?: Flex__<typeof TextInput>;
  text13?: Flex__<"div">;
  editText132?: Flex__<typeof TextInput>;
  image5?: Flex__<typeof PlasmicImg__>;
  editImage52?: Flex__<typeof TextInput>;
  text14?: Flex__<"div">;
  editText142?: Flex__<typeof TextInput>;
  text15?: Flex__<"div">;
  editText152?: Flex__<typeof TextInput>;
  text16?: Flex__<"div">;
  editText162?: Flex__<typeof TextInput>;
  text17?: Flex__<"div">;
  editText172?: Flex__<typeof TextInput>;
};

export interface DefaultSqueezeVariant2Props {
  pageId?: number;
  editable?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSqueezeVariant2__RenderFunc(props: {
  variants: PlasmicSqueezeVariant2__VariantsArgs;
  args: PlasmicSqueezeVariant2__ArgsType;
  overrides: PlasmicSqueezeVariant2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          editable: "true"
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "input.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "input2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``,

        onMutate: generateOnMutateForSpec("value", AntdInput_Helpers)
      },
      {
        path: "text4.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "editText1R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText1 || $queries?.cms?.data[0]?.text_1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText5",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText6",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText7",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText8",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText9",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText10",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText11",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText122",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText13",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText14",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText15",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText16",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText17",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage1",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage3",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage4",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage5",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText2R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText2 || $queries?.cms?.data[0]?.text_2;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText3R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText3 || $queries?.cms?.data[0]?.text_3;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText7R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText7 || $queries?.cms?.data[0]?.text_7;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText8R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText8 || $queries?.cms?.data[0]?.text_8;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText9R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText9 || $queries?.cms?.data[0]?.text_9;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText10R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText10 || $queries?.cms?.data[0]?.text_10;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText11R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText11 || $queries?.cms?.data[0]?.text_11;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editText123.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText132.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText142.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText152.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText162.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText172.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage1R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage2R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage3R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage4R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editImage52.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "editText6R.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.editText6 || $queries?.cms?.data[0]?.text_6;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "editImage53.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    pages: usePlasmicDataOp(() => {
      return {
        sourceId: "rgeC3gdZPKsM6rWvBzgeeg",
        opId: "2fb52e52-9375-4119-8420-26d070d9ad75",
        userArgs: {},
        cacheKey: `plasmic.$.2fb52e52-9375-4119-8420-26d070d9ad75.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    cms: usePlasmicDataOp(() => {
      return {
        sourceId: "rgeC3gdZPKsM6rWvBzgeeg",
        opId: "c17c8aed-33b9-4b22-a7f3-6b386c3bac2d",
        userArgs: {},
        cacheKey: `plasmic.$.c17c8aed-33b9-4b22-a7f3-6b386c3bac2d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_1V0TfIi4OQxU()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"desktop"}
        data-plasmic-override={overrides.desktop}
        className={classNames(projectcss.all, sty.desktop)}
      >
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column___8Etr3)}>
            <Editable
              data-plasmic-name={"editableLogoLogo"}
              data-plasmic-override={overrides.editableLogoLogo}
              className={classNames("__wab_instance", sty.editableLogoLogo)}
              edit2={
                <TextInput
                  data-plasmic-name={"editImage53"}
                  data-plasmic-override={overrides.editImage53}
                  className={classNames("__wab_instance", sty.editImage53)}
                  endIcon={null}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "editImage53",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};

                      $steps["updateEditImage5"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["editImage5"]
                              },
                              operation: 0,
                              value: $state.editImage5R.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEditImage5"] != null &&
                        typeof $steps["updateEditImage5"] === "object" &&
                        typeof $steps["updateEditImage5"].then === "function"
                      ) {
                        $steps["updateEditImage5"] = await $steps[
                          "updateEditImage5"
                        ];
                      }

                      $steps["postgresUpdateById"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                opId: "cdca0ed9-2c85-4b29-a87b-609b5f92dcd8",
                                userArgs: {
                                  keys: [$queries.pages.data[0].cms],
                                  variables: [$state.editImage5R.value]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateById"] != null &&
                        typeof $steps["postgresUpdateById"] === "object" &&
                        typeof $steps["postgresUpdateById"].then === "function"
                      ) {
                        $steps["postgresUpdateById"] = await $steps[
                          "postgresUpdateById"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $state.editImage5 || $queries?.cms?.data[0]?.logo;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  startIcon={null}
                  value={
                    generateStateValueProp($state, ["editImage53", "value"]) ??
                    ""
                  }
                />
              }
              editEnabled={(() => {
                try {
                  return $props.editable == "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <PlasmicImg__
                data-plasmic-name={"logo"}
                data-plasmic-override={overrides.logo}
                alt={""}
                className={classNames(sty.logo)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"175px"}
                loading={"eager"}
                src={(() => {
                  try {
                    return $state.editImage5 || $queries?.cms?.data[0]?.logo;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </Editable>
            <Editable
              data-plasmic-name={"editableText1"}
              data-plasmic-override={overrides.editableText1}
              className={classNames("__wab_instance", sty.editableText1)}
              edit2={
                <TextInput
                  data-plasmic-name={"editText1R"}
                  data-plasmic-override={overrides.editText1R}
                  className={classNames("__wab_instance", sty.editText1R)}
                  endIcon={null}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "editText1R",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};

                      $steps["updateEditText1"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["editText1"]
                              },
                              operation: 0,
                              value: $state.editText1R.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEditText1"] != null &&
                        typeof $steps["updateEditText1"] === "object" &&
                        typeof $steps["updateEditText1"].then === "function"
                      ) {
                        $steps["updateEditText1"] = await $steps[
                          "updateEditText1"
                        ];
                      }

                      $steps["postgresUpdateById"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                opId: "d660dd2e-db09-419b-91d7-9a88b1e0fb70",
                                userArgs: {
                                  variables: [$state.editText1R.value],
                                  keys: [$queries.pages.data[0].cms]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateById"] != null &&
                        typeof $steps["postgresUpdateById"] === "object" &&
                        typeof $steps["postgresUpdateById"].then === "function"
                      ) {
                        $steps["postgresUpdateById"] = await $steps[
                          "postgresUpdateById"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $state.editText1 || $queries?.cms?.data[0]?.text_1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  startIcon={null}
                  value={
                    generateStateValueProp($state, ["editText1R", "value"]) ??
                    ""
                  }
                />
              }
              editEnabled={(() => {
                try {
                  return $props.editable == "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div
                data-plasmic-name={"text1"}
                data-plasmic-override={overrides.text1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.editText1 || $queries?.cms?.data[0]?.text_1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Unlock Discount > Easy Checkout ";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Editable>
            <Editable
              data-plasmic-name={"editableText2"}
              data-plasmic-override={overrides.editableText2}
              className={classNames("__wab_instance", sty.editableText2)}
              edit2={
                <TextInput
                  data-plasmic-name={"editText2R"}
                  data-plasmic-override={overrides.editText2R}
                  className={classNames("__wab_instance", sty.editText2R)}
                  endIcon={null}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "editText2R",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};

                      $steps["updateEditText2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["editText2"]
                              },
                              operation: 0,
                              value: $state.editText2R.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEditText2"] != null &&
                        typeof $steps["updateEditText2"] === "object" &&
                        typeof $steps["updateEditText2"].then === "function"
                      ) {
                        $steps["updateEditText2"] = await $steps[
                          "updateEditText2"
                        ];
                      }

                      $steps["postgresUpdateById"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                opId: "d981b65a-ae49-405f-9cfa-b08ddcfa677b",
                                userArgs: {
                                  keys: [$queries.pages.data[0].cms],
                                  variables: [$state.editText2R.value]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateById"] != null &&
                        typeof $steps["postgresUpdateById"] === "object" &&
                        typeof $steps["postgresUpdateById"].then === "function"
                      ) {
                        $steps["postgresUpdateById"] = await $steps[
                          "postgresUpdateById"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $state.editText2 || $queries?.cms?.data[0]?.text_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  startIcon={null}
                  value={
                    generateStateValueProp($state, ["editText2R", "value"]) ??
                    ""
                  }
                />
              }
              editEnabled={(() => {
                try {
                  return $props.editable == "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div
                data-plasmic-name={"text2"}
                data-plasmic-override={overrides.text2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.editText2 || $queries?.cms?.data[0]?.text_2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Get Pricing Details";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Editable>
            <Editable
              data-plasmic-name={"editableText3"}
              data-plasmic-override={overrides.editableText3}
              className={classNames("__wab_instance", sty.editableText3)}
              edit2={
                <TextInput
                  data-plasmic-name={"editText3R"}
                  data-plasmic-override={overrides.editText3R}
                  className={classNames("__wab_instance", sty.editText3R)}
                  endIcon={null}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "editText3R",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }).apply(null, eventArgs);
                    (async event => {
                      const $steps = {};

                      $steps["updateEditText3"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["editText3"]
                              },
                              operation: 0,
                              value: $state.editText3R.value
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateEditText3"] != null &&
                        typeof $steps["updateEditText3"] === "object" &&
                        typeof $steps["updateEditText3"].then === "function"
                      ) {
                        $steps["updateEditText3"] = await $steps[
                          "updateEditText3"
                        ];
                      }

                      $steps["postgresUpdateById"] = true
                        ? (() => {
                            const actionArgs = {
                              dataOp: {
                                sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                opId: "d9dda645-8f7d-44f1-ad80-be2452b4c130",
                                userArgs: {
                                  variables: [$state.editText3R.value],
                                  keys: [$queries.pages.data[0].cms]
                                },
                                cacheKey: null,
                                invalidatedKeys: ["plasmic_refresh_all"],
                                roleId: null
                              }
                            };
                            return (async ({ dataOp, continueOnError }) => {
                              try {
                                const response = await executePlasmicDataOp(
                                  dataOp,
                                  {
                                    userAuthToken:
                                      dataSourcesCtx?.userAuthToken,
                                    user: dataSourcesCtx?.user
                                  }
                                );
                                await plasmicInvalidate(dataOp.invalidatedKeys);
                                return response;
                              } catch (e) {
                                if (!continueOnError) {
                                  throw e;
                                }
                                return e;
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["postgresUpdateById"] != null &&
                        typeof $steps["postgresUpdateById"] === "object" &&
                        typeof $steps["postgresUpdateById"].then === "function"
                      ) {
                        $steps["postgresUpdateById"] = await $steps[
                          "postgresUpdateById"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  placeholder={(() => {
                    try {
                      return $state.editText3 || $queries?.cms?.data[0]?.text_3;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  startIcon={null}
                  value={
                    generateStateValueProp($state, ["editText3R", "value"]) ??
                    ""
                  }
                />
              }
              editEnabled={(() => {
                try {
                  return $props.editable == "true";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
            >
              <div
                data-plasmic-name={"text3"}
                data-plasmic-override={overrides.text3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text3
                )}
              >
                <React.Fragment>
                  {$state.editText3 || $queries?.cms?.data[0]?.text_3}
                </React.Fragment>
              </div>
            </Editable>
            <form
              action={
                "https://hook.us1.make.com/5mordka6hk6nytd9doqnbe6kbf4r3drk"
              }
              className={classNames(projectcss.all, sty.form__dQxhs)}
              method={"post"}
            >
              {(() => {
                const child$Props = {
                  className: classNames("__wab_instance", sty.form),
                  extendedOnValuesChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "value",
                      ["form", "value"],
                      FormWrapper_Helpers
                    ),
                  formItems: [
                    { label: "Name", name: "name", inputType: "Text" },
                    {
                      label: "Message",
                      name: "message",
                      inputType: "Text Area"
                    }
                  ],
                  labelCol: { span: 8, horizontalOnly: true },
                  layout: "vertical",
                  mode: undefined,
                  onFinish: async values => {
                    const $steps = {};

                    $steps["zapierTrigger"] = true
                      ? (() => {
                          const actionArgs = {
                            dataOp: {
                              sourceId: "8BxAb4WeSUGRTGvfMAoccZ",
                              opId: "e10ca2057349d66dabeccbbca0b50112b4e939ea69a57a5748b061b59437571c4cd091d3d604d52f80bee232c7163eb964615021a8bef04aad0d8455658c9683acc464c970435920f045",
                              userArgs: {},
                              cacheKey: null,
                              invalidatedKeys: ["plasmic_refresh_all"],
                              roleId: null
                            }
                          };
                          return (async ({ dataOp, continueOnError }) => {
                            try {
                              const response = await executePlasmicDataOp(
                                dataOp,
                                {
                                  userAuthToken: dataSourcesCtx?.userAuthToken,
                                  user: dataSourcesCtx?.user
                                }
                              );
                              await plasmicInvalidate(dataOp.invalidatedKeys);
                              return response;
                            } catch (e) {
                              if (!continueOnError) {
                                throw e;
                              }
                              return e;
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["zapierTrigger"] != null &&
                      typeof $steps["zapierTrigger"] === "object" &&
                      typeof $steps["zapierTrigger"].then === "function"
                    ) {
                      $steps["zapierTrigger"] = await $steps["zapierTrigger"];
                    }
                  },
                  onIsSubmittingChange:
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "isSubmitting",
                      ["form", "isSubmitting"],
                      FormWrapper_Helpers
                    ),
                  ref: ref => {
                    $refs["form"] = ref;
                  },
                  wrapperCol: { span: 16, horizontalOnly: true }
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "value",
                      plasmicStateName: "form.value"
                    },
                    {
                      name: "isSubmitting",
                      plasmicStateName: "form.isSubmitting"
                    }
                  ],
                  [],
                  FormWrapper_Helpers ?? {},
                  child$Props
                );

                return (
                  <FormWrapper
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    {...child$Props}
                  >
                    <FormItemWrapper
                      data-plasmic-name={"formField"}
                      data-plasmic-override={overrides.formField}
                      className={classNames("__wab_instance", sty.formField)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Hd7L
                          )}
                        >
                          {"Label"}
                        </div>
                      }
                      name={"name"}
                    >
                      {(() => {
                        const child$Props = {
                          addonAfter: null,
                          addonBefore: null,
                          className: classNames("__wab_instance", sty.input),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input", "value"],
                            AntdInput_Helpers
                          ),
                          prefix: null,
                          suffix: null,
                          value: generateStateValueProp($state, [
                            "input",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input"}
                            data-plasmic-override={overrides.input}
                            {...child$Props}
                          />
                        );
                      })()}
                      {(() => {
                        const child$Props = {
                          addonAfter: null,
                          addonBefore: null,
                          className: classNames("__wab_instance", sty.input2),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["input2", "value"],
                            AntdInput_Helpers
                          ),
                          prefix: null,
                          suffix: null,
                          value: generateStateValueProp($state, [
                            "input2",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "input2.value"
                            }
                          ],
                          [],
                          AntdInput_Helpers ?? {},
                          child$Props
                        );

                        return (
                          <AntdInput
                            data-plasmic-name={"input2"}
                            data-plasmic-override={overrides.input2}
                            {...child$Props}
                          />
                        );
                      })()}
                    </FormItemWrapper>
                    <AntdButton
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames("__wab_instance", sty.button)}
                      icon={null}
                    >
                      <div
                        data-plasmic-name={"squeezeC1Cta"}
                        data-plasmic-override={overrides.squeezeC1Cta}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.squeezeC1Cta
                        )}
                      >
                        {"Submit"}
                      </div>
                    </AntdButton>
                  </FormWrapper>
                );
              })()}
              <TextInput2
                data-plasmic-name={"text4"}
                data-plasmic-override={overrides.text4}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.text4)}
                name={"field1"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["text4", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"\ud83d\udce7 Your Email Address"}
                required={true}
                value={generateStateValueProp($state, ["text4", "value"]) ?? ""}
              />

              <TextInput2
                data-plasmic-name={"text5"}
                data-plasmic-override={overrides.text5}
                aria-label={"email"}
                className={classNames("__wab_instance", sty.text5)}
                name={"field2"}
                onChange={(...eventArgs) => {
                  generateStateOnChangeProp($state, ["text5", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={" \u260e\ufe0f Your Phone Number"}
                required={true}
                value={generateStateValueProp($state, ["text5", "value"]) ?? ""}
              />

              <Button
                data-plasmic-name={"text6"}
                data-plasmic-override={overrides.text6}
                className={classNames("__wab_instance", sty.text6)}
                color={undefined}
                submitsForm={false}
              >
                <Editable
                  data-plasmic-name={"editableText6"}
                  data-plasmic-override={overrides.editableText6}
                  className={classNames("__wab_instance", sty.editableText6)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText6R"}
                      data-plasmic-override={overrides.editText6R}
                      className={classNames("__wab_instance", sty.editText6R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText6R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditText6"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editText6"]
                                  },
                                  operation: 0,
                                  value: $state.editText6R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditText6"] != null &&
                            typeof $steps["updateEditText6"] === "object" &&
                            typeof $steps["updateEditText6"].then === "function"
                          ) {
                            $steps["updateEditText6"] = await $steps[
                              "updateEditText6"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "44ec8675-f1bd-4939-9201-bbfbf0b62fc3",
                                    userArgs: {
                                      keys: [$queries.pages.data[0].cms],
                                      variables: [$state.editText6R.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText6 || $queries?.cms?.data[0]?.text_6
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText6R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fxIw5
                    )}
                  >
                    <React.Fragment>
                      {$state.editText6 || $queries?.cms?.data[0]?.text_6}
                    </React.Fragment>
                  </div>
                </Editable>
              </Button>
            </form>
            <div className={classNames(projectcss.all, sty.freeBox__m85Rv)} />

            <div className={classNames(projectcss.all, sty.freeBox__jwWbS)}>
              <div
                data-plasmic-name={"disclaimer"}
                data-plasmic-override={overrides.disclaimer}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.disclaimer
                )}
              >
                {
                  "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service."
                }
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column___6AJz)}>
            <div className={classNames(projectcss.all, sty.freeBox__hTvdl)}>
              <Editable
                data-plasmic-name={"editableImage1"}
                data-plasmic-override={overrides.editableImage1}
                className={classNames("__wab_instance", sty.editableImage1)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editImage1R"}
                    data-plasmic-override={overrides.editImage1R}
                    className={classNames("__wab_instance", sty.editImage1R)}
                    endIcon={null}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editImage1R",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }).apply(null, eventArgs);
                      (async event => {
                        const $steps = {};

                        $steps["updateEditImage1"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["editImage1"]
                                },
                                operation: 0,
                                value: $state.editImage1R.value
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateEditImage1"] != null &&
                          typeof $steps["updateEditImage1"] === "object" &&
                          typeof $steps["updateEditImage1"].then === "function"
                        ) {
                          $steps["updateEditImage1"] = await $steps[
                            "updateEditImage1"
                          ];
                        }

                        $steps["postgresUpdateById"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                  opId: "a6608757-0a68-4a0e-8a92-3c1dfcacb4b4",
                                  userArgs: {
                                    keys: [$queries.pages.data[0].cms],
                                    variables: [$state.editImage1R.value]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["postgresUpdateById"] != null &&
                          typeof $steps["postgresUpdateById"] === "object" &&
                          typeof $steps["postgresUpdateById"].then ===
                            "function"
                        ) {
                          $steps["postgresUpdateById"] = await $steps[
                            "postgresUpdateById"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return (
                          $state.editImage1 || $queries?.cms?.data[0]?.image_1
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, [
                        "editImage1R",
                        "value"
                      ]) ?? ""
                    }
                  />
                }
                editEnabled={(() => {
                  try {
                    return $props.editable == "true";
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()}
              >
                <PlasmicImg__
                  data-plasmic-name={"image1"}
                  data-plasmic-override={overrides.image1}
                  alt={""}
                  className={classNames(sty.image1)}
                  displayHeight={"auto"}
                  displayMaxHeight={"190px"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"173px"}
                  loading={"eager"}
                  src={(() => {
                    try {
                      return (
                        $state.editImage1 || $queries?.cms?.data[0]?.image_1
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </Editable>
              <div className={classNames(projectcss.all, sty.freeBox__jzrjE)}>
                <Editable
                  data-plasmic-name={"editableText7"}
                  data-plasmic-override={overrides.editableText7}
                  className={classNames("__wab_instance", sty.editableText7)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText7R"}
                      data-plasmic-override={overrides.editText7R}
                      className={classNames("__wab_instance", sty.editText7R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText7R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditText7"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editText7"]
                                  },
                                  operation: 0,
                                  value: $state.editText7R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditText7"] != null &&
                            typeof $steps["updateEditText7"] === "object" &&
                            typeof $steps["updateEditText7"].then === "function"
                          ) {
                            $steps["updateEditText7"] = await $steps[
                              "updateEditText7"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "f36b70af-5b7f-4921-8d9e-fff8f4107a76",
                                    userArgs: {
                                      variables: [$state.editText7R.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText7 || $queries?.cms?.data[0]?.text_7
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText7R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text7"}
                    data-plasmic-override={overrides.text7}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text7
                    )}
                  >
                    <React.Fragment>
                      {$state.editText7 || $queries?.cms?.data[0]?.text_7}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  data-plasmic-name={"editableText8"}
                  data-plasmic-override={overrides.editableText8}
                  className={classNames("__wab_instance", sty.editableText8)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText8R"}
                      data-plasmic-override={overrides.editText8R}
                      className={classNames("__wab_instance", sty.editText8R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText8R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditText8"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editText8"]
                                  },
                                  operation: 0,
                                  value: $state.editText8R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditText8"] != null &&
                            typeof $steps["updateEditText8"] === "object" &&
                            typeof $steps["updateEditText8"].then === "function"
                          ) {
                            $steps["updateEditText8"] = await $steps[
                              "updateEditText8"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "046a09c2-5923-4f0c-89d7-5cfcf1f81b9c",
                                    userArgs: {
                                      keys: [$queries.pages.data[0].cms],
                                      variables: [$state.editText8R.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText8 || $queries?.cms?.data[0]?.text_8
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText8R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text8"}
                    data-plasmic-override={overrides.text8}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text8
                    )}
                  >
                    <React.Fragment>
                      {$state.editText8 || $queries?.cms?.data[0]?.text_8}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tKft3)} />

            <div
              data-plasmic-name={"iconValue1"}
              data-plasmic-override={overrides.iconValue1}
              className={classNames(projectcss.all, sty.iconValue1)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___1DlFl)}>
                <Editable
                  data-plasmic-name={"editableImage2"}
                  data-plasmic-override={overrides.editableImage2}
                  className={classNames("__wab_instance", sty.editableImage2)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage2R"}
                      data-plasmic-override={overrides.editImage2R}
                      className={classNames("__wab_instance", sty.editImage2R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage2R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditImage2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editImage2"]
                                  },
                                  operation: 0,
                                  value: $state.editImage2R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditImage2"] != null &&
                            typeof $steps["updateEditImage2"] === "object" &&
                            typeof $steps["updateEditImage2"].then ===
                              "function"
                          ) {
                            $steps["updateEditImage2"] = await $steps[
                              "updateEditImage2"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "5c8947e6-3a1a-41a5-bbf9-429036d90c35",
                                    userArgs: {
                                      keys: [$queries.pages.data[0].cms],
                                      variables: [$state.editImage2R.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editImage2 || $queries?.cms?.data[0]?.image_2
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage2R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicImg__
                    data-plasmic-name={"image2"}
                    data-plasmic-override={overrides.image2}
                    alt={""}
                    className={classNames(sty.image2)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return (
                          $state.editImage2 || $queries?.cms?.data[0]?.image_2
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Editable>
                <Editable
                  data-plasmic-name={"editableText9"}
                  data-plasmic-override={overrides.editableText9}
                  className={classNames("__wab_instance", sty.editableText9)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText9R"}
                      data-plasmic-override={overrides.editText9R}
                      className={classNames("__wab_instance", sty.editText9R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText9R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditText9"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editText9"]
                                  },
                                  operation: 0,
                                  value: $state.editText9R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditText9"] != null &&
                            typeof $steps["updateEditText9"] === "object" &&
                            typeof $steps["updateEditText9"].then === "function"
                          ) {
                            $steps["updateEditText9"] = await $steps[
                              "updateEditText9"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "c4561e46-d77c-43b9-a93e-11cf66b006ce",
                                    userArgs: {
                                      variables: [$state.editText9R.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText9 || $queries?.cms?.data[0]?.text_9
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText9R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text9"}
                    data-plasmic-override={overrides.text9}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text9
                    )}
                  >
                    <React.Fragment>
                      {$state.editText9 || $queries?.cms?.data[0]?.text_9}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue2"}
              data-plasmic-override={overrides.iconValue2}
              className={classNames(projectcss.all, sty.iconValue2)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__nFhD)}>
                <Editable
                  data-plasmic-name={"editableImage3"}
                  data-plasmic-override={overrides.editableImage3}
                  className={classNames("__wab_instance", sty.editableImage3)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage3R"}
                      data-plasmic-override={overrides.editImage3R}
                      className={classNames("__wab_instance", sty.editImage3R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage3R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditImage3"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editImage3"]
                                  },
                                  operation: 0,
                                  value: $state.editImage3R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditImage3"] != null &&
                            typeof $steps["updateEditImage3"] === "object" &&
                            typeof $steps["updateEditImage3"].then ===
                              "function"
                          ) {
                            $steps["updateEditImage3"] = await $steps[
                              "updateEditImage3"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "c55636c9-b7cc-4903-9b85-2c7cda3ed00f",
                                    userArgs: {
                                      keys: [$queries.pages.data[0].cms],
                                      variables: [$state.editImage3R.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editImage3 || $queries?.cms?.data[0]?.image_3
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage3R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicImg__
                    data-plasmic-name={"image3"}
                    data-plasmic-override={overrides.image3}
                    alt={""}
                    className={classNames(sty.image3)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return (
                          $state.editImage3 || $queries?.cms?.data[0]?.image_3
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Editable>
                <Editable
                  data-plasmic-name={"editableText10"}
                  data-plasmic-override={overrides.editableText10}
                  className={classNames("__wab_instance", sty.editableText10)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText10R"}
                      data-plasmic-override={overrides.editText10R}
                      className={classNames("__wab_instance", sty.editText10R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText10R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditText10"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editText10"]
                                  },
                                  operation: 0,
                                  value: $state.editText10R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditText10"] != null &&
                            typeof $steps["updateEditText10"] === "object" &&
                            typeof $steps["updateEditText10"].then ===
                              "function"
                          ) {
                            $steps["updateEditText10"] = await $steps[
                              "updateEditText10"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "ef635480-5f3a-4492-a5fb-4b02a5b53066",
                                    userArgs: {
                                      keys: [$queries.pages.data[0].cms],
                                      variables: [$state.editText10R.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText10 || $queries?.cms?.data[0]?.text_10
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText10R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text10"}
                    data-plasmic-override={overrides.text10}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text10
                    )}
                  >
                    <React.Fragment>
                      {$state.editText10 || $queries?.cms?.data[0]?.text_10}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
            </div>
            <div
              data-plasmic-name={"iconValue3"}
              data-plasmic-override={overrides.iconValue3}
              className={classNames(projectcss.all, sty.iconValue3)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__kjFt)}>
                <Editable
                  data-plasmic-name={"editableImage4"}
                  data-plasmic-override={overrides.editableImage4}
                  className={classNames("__wab_instance", sty.editableImage4)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage4R"}
                      data-plasmic-override={overrides.editImage4R}
                      className={classNames("__wab_instance", sty.editImage4R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editImage4R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditImage4"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editImage4"]
                                  },
                                  operation: 0,
                                  value: $state.editImage4R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditImage4"] != null &&
                            typeof $steps["updateEditImage4"] === "object" &&
                            typeof $steps["updateEditImage4"].then ===
                              "function"
                          ) {
                            $steps["updateEditImage4"] = await $steps[
                              "updateEditImage4"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "c39acf80-000f-42a5-9161-fd640b69621c",
                                    userArgs: {
                                      keys: [$queries.pages.data[0].cms],
                                      variables: [$state.editImage4R.value]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editImage4 || $queries?.cms?.data[0]?.image_4
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage4R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <PlasmicImg__
                    data-plasmic-name={"image4"}
                    data-plasmic-override={overrides.image4}
                    alt={""}
                    className={classNames(sty.image4)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return (
                          $state.editImage4 || $queries?.cms?.data[0]?.image_4
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Editable>
                <Editable
                  data-plasmic-name={"editableText11"}
                  data-plasmic-override={overrides.editableText11}
                  className={classNames("__wab_instance", sty.editableText11)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText11R"}
                      data-plasmic-override={overrides.editText11R}
                      className={classNames("__wab_instance", sty.editText11R)}
                      endIcon={null}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "editText11R",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);
                        (async event => {
                          const $steps = {};

                          $steps["updateEditText11"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["editText11"]
                                  },
                                  operation: 0,
                                  value: $state.editText11R.value
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateEditText11"] != null &&
                            typeof $steps["updateEditText11"] === "object" &&
                            typeof $steps["updateEditText11"].then ===
                              "function"
                          ) {
                            $steps["updateEditText11"] = await $steps[
                              "updateEditText11"
                            ];
                          }

                          $steps["postgresUpdateById"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "g2kPPaDE2d7MrKWxSfsPF6",
                                    opId: "26fd1a32-c328-43ac-b699-171cb730673d",
                                    userArgs: {
                                      variables: [$state.editText11R.value],
                                      keys: [$queries.pages.data[0].cms]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["postgresUpdateById"] != null &&
                            typeof $steps["postgresUpdateById"] === "object" &&
                            typeof $steps["postgresUpdateById"].then ===
                              "function"
                          ) {
                            $steps["postgresUpdateById"] = await $steps[
                              "postgresUpdateById"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText11 || $queries?.cms?.data[0]?.text_11
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText11R",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                  editEnabled={(() => {
                    try {
                      return $props.editable == "true";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                >
                  <div
                    data-plasmic-name={"text11"}
                    data-plasmic-override={overrides.text11}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text11
                    )}
                  >
                    <React.Fragment>
                      {$state.editText11 || $queries?.cms?.data[0]?.text_11}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__s43Da)} />

            <div className={classNames(projectcss.all, sty.freeBox__h0Fi)}>
              <div
                data-plasmic-name={"squeezeC2CtaH1"}
                data-plasmic-override={overrides.squeezeC2CtaH1}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 1";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"squeezeC2CtaH2"}
                data-plasmic-override={overrides.squeezeC2CtaH2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.squeezeC2CtaH2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $ctx.fetchDyanamicData.records[0].fields
                        .squeeze_c2_cta_h2;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "CTA Headline 2";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__lwDjI)} />

            <div
              data-plasmic-name={"watchers"}
              data-plasmic-override={overrides.watchers}
              className={classNames(projectcss.all, sty.watchers)}
            >
              <Editable
                className={classNames("__wab_instance", sty.editable__pb5X)}
                edit2={
                  <TextInput
                    data-plasmic-name={"editText123"}
                    data-plasmic-override={overrides.editText123}
                    className={classNames("__wab_instance", sty.editText123)}
                    endIcon={null}
                    onChange={(...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "editText123",
                        "value"
                      ])((e => e.target?.value).apply(null, eventArgs));
                    }}
                    placeholder={(() => {
                      try {
                        return (
                          $state.editText122 || $queries?.cms?.data[0]?.text_12
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    startIcon={null}
                    value={
                      generateStateValueProp($state, [
                        "editText123",
                        "value"
                      ]) ?? ""
                    }
                  />
                }
              >
                <div
                  data-plasmic-name={"text12"}
                  data-plasmic-override={overrides.text12}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text12
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          $state.editText122 || $queries?.cms?.data[0]?.text_12
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Enter some text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Editable>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zv9U3)}>
              <div className={classNames(projectcss.all, sty.freeBox__i41Wk)}>
                <Editable
                  className={classNames("__wab_instance", sty.editable___5VkeR)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText132"}
                      data-plasmic-override={overrides.editText132}
                      className={classNames("__wab_instance", sty.editText132)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText132",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText13 || $queries?.cms?.data[0]?.text_13
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText132",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text13"}
                    data-plasmic-override={overrides.text13}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text13
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText13 || $queries?.cms?.data[0]?.text_13
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Enter some text:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__d2YqJ)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editImage52"}
                      data-plasmic-override={overrides.editImage52}
                      className={classNames("__wab_instance", sty.editImage52)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editImage52",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editImage5 || $queries?.cms?.data[0]?.image_5
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editImage52",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <PlasmicImg__
                    data-plasmic-name={"image5"}
                    data-plasmic-override={overrides.image5}
                    alt={""}
                    className={classNames(sty.image5)}
                    displayHeight={"auto"}
                    displayMaxHeight={"50px"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"eager"}
                    src={(() => {
                      try {
                        return (
                          $state.editImage5 || $queries?.cms?.data[0]?.image_5
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable__cPNzJ)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText142"}
                      data-plasmic-override={overrides.editText142}
                      className={classNames("__wab_instance", sty.editText142)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText142",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText14 || $queries?.cms?.data[0]?.text_14
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText142",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text14"}
                    data-plasmic-override={overrides.text14}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text14
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText14 || $queries?.cms?.data[0]?.text_14
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___0MwH9)}>
                <Editable
                  className={classNames("__wab_instance", sty.editable__tdRzd)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText152"}
                      data-plasmic-override={overrides.editText152}
                      className={classNames("__wab_instance", sty.editText152)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText152",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={`Enter something…${
                        $state.editText15 || $queries?.cms?.data[0]?.text_15
                      }`}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText152",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text15"}
                    data-plasmic-override={overrides.text15}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text15
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText15 || $queries?.cms?.data[0]?.text_15
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable___0EB2S)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText162"}
                      data-plasmic-override={overrides.editText162}
                      className={classNames("__wab_instance", sty.editText162)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText162",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText16 || $queries?.cms?.data[0]?.text_16
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText162",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text16"}
                    data-plasmic-override={overrides.text16}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text16
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText16 || $queries?.cms?.data[0]?.text_16
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
                <Editable
                  className={classNames("__wab_instance", sty.editable___1YjAx)}
                  edit2={
                    <TextInput
                      data-plasmic-name={"editText172"}
                      data-plasmic-override={overrides.editText172}
                      className={classNames("__wab_instance", sty.editText172)}
                      endIcon={null}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "editText172",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={(() => {
                        try {
                          return (
                            $state.editText17 || $queries?.cms?.data[0]?.text_17
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      startIcon={null}
                      value={
                        generateStateValueProp($state, [
                          "editText172",
                          "value"
                        ]) ?? ""
                      }
                    />
                  }
                >
                  <div
                    data-plasmic-name={"text17"}
                    data-plasmic-override={overrides.text17}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text17
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            $state.editText17 || $queries?.cms?.data[0]?.text_17
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </Editable>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "desktop",
    "columns",
    "editableLogoLogo",
    "logo",
    "editImage53",
    "editableText1",
    "text1",
    "editText1R",
    "editableText2",
    "text2",
    "editText2R",
    "editableText3",
    "text3",
    "editText3R",
    "form",
    "formField",
    "input",
    "input2",
    "button",
    "squeezeC1Cta",
    "text4",
    "text5",
    "text6",
    "editableText6",
    "editText6R",
    "disclaimer",
    "editableImage1",
    "image1",
    "editImage1R",
    "editableText7",
    "text7",
    "editText7R",
    "editableText8",
    "text8",
    "editText8R",
    "iconValue1",
    "editableImage2",
    "image2",
    "editImage2R",
    "editableText9",
    "text9",
    "editText9R",
    "iconValue2",
    "editableImage3",
    "image3",
    "editImage3R",
    "editableText10",
    "text10",
    "editText10R",
    "iconValue3",
    "editableImage4",
    "image4",
    "editImage4R",
    "editableText11",
    "text11",
    "editText11R",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "watchers",
    "text12",
    "editText123",
    "text13",
    "editText132",
    "image5",
    "editImage52",
    "text14",
    "editText142",
    "text15",
    "editText152",
    "text16",
    "editText162",
    "text17",
    "editText172"
  ],
  desktop: [
    "desktop",
    "columns",
    "editableLogoLogo",
    "logo",
    "editImage53",
    "editableText1",
    "text1",
    "editText1R",
    "editableText2",
    "text2",
    "editText2R",
    "editableText3",
    "text3",
    "editText3R",
    "form",
    "formField",
    "input",
    "input2",
    "button",
    "squeezeC1Cta",
    "text4",
    "text5",
    "text6",
    "editableText6",
    "editText6R",
    "disclaimer",
    "editableImage1",
    "image1",
    "editImage1R",
    "editableText7",
    "text7",
    "editText7R",
    "editableText8",
    "text8",
    "editText8R",
    "iconValue1",
    "editableImage2",
    "image2",
    "editImage2R",
    "editableText9",
    "text9",
    "editText9R",
    "iconValue2",
    "editableImage3",
    "image3",
    "editImage3R",
    "editableText10",
    "text10",
    "editText10R",
    "iconValue3",
    "editableImage4",
    "image4",
    "editImage4R",
    "editableText11",
    "text11",
    "editText11R",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "watchers",
    "text12",
    "editText123",
    "text13",
    "editText132",
    "image5",
    "editImage52",
    "text14",
    "editText142",
    "text15",
    "editText152",
    "text16",
    "editText162",
    "text17",
    "editText172"
  ],
  columns: [
    "columns",
    "editableLogoLogo",
    "logo",
    "editImage53",
    "editableText1",
    "text1",
    "editText1R",
    "editableText2",
    "text2",
    "editText2R",
    "editableText3",
    "text3",
    "editText3R",
    "form",
    "formField",
    "input",
    "input2",
    "button",
    "squeezeC1Cta",
    "text4",
    "text5",
    "text6",
    "editableText6",
    "editText6R",
    "disclaimer",
    "editableImage1",
    "image1",
    "editImage1R",
    "editableText7",
    "text7",
    "editText7R",
    "editableText8",
    "text8",
    "editText8R",
    "iconValue1",
    "editableImage2",
    "image2",
    "editImage2R",
    "editableText9",
    "text9",
    "editText9R",
    "iconValue2",
    "editableImage3",
    "image3",
    "editImage3R",
    "editableText10",
    "text10",
    "editText10R",
    "iconValue3",
    "editableImage4",
    "image4",
    "editImage4R",
    "editableText11",
    "text11",
    "editText11R",
    "squeezeC2CtaH1",
    "squeezeC2CtaH2",
    "watchers",
    "text12",
    "editText123",
    "text13",
    "editText132",
    "image5",
    "editImage52",
    "text14",
    "editText142",
    "text15",
    "editText152",
    "text16",
    "editText162",
    "text17",
    "editText172"
  ],
  editableLogoLogo: ["editableLogoLogo", "logo", "editImage53"],
  logo: ["logo"],
  editImage53: ["editImage53"],
  editableText1: ["editableText1", "text1", "editText1R"],
  text1: ["text1"],
  editText1R: ["editText1R"],
  editableText2: ["editableText2", "text2", "editText2R"],
  text2: ["text2"],
  editText2R: ["editText2R"],
  editableText3: ["editableText3", "text3", "editText3R"],
  text3: ["text3"],
  editText3R: ["editText3R"],
  form: ["form", "formField", "input", "input2", "button", "squeezeC1Cta"],
  formField: ["formField", "input", "input2"],
  input: ["input"],
  input2: ["input2"],
  button: ["button", "squeezeC1Cta"],
  squeezeC1Cta: ["squeezeC1Cta"],
  text4: ["text4"],
  text5: ["text5"],
  text6: ["text6", "editableText6", "editText6R"],
  editableText6: ["editableText6", "editText6R"],
  editText6R: ["editText6R"],
  disclaimer: ["disclaimer"],
  editableImage1: ["editableImage1", "image1", "editImage1R"],
  image1: ["image1"],
  editImage1R: ["editImage1R"],
  editableText7: ["editableText7", "text7", "editText7R"],
  text7: ["text7"],
  editText7R: ["editText7R"],
  editableText8: ["editableText8", "text8", "editText8R"],
  text8: ["text8"],
  editText8R: ["editText8R"],
  iconValue1: [
    "iconValue1",
    "editableImage2",
    "image2",
    "editImage2R",
    "editableText9",
    "text9",
    "editText9R"
  ],
  editableImage2: ["editableImage2", "image2", "editImage2R"],
  image2: ["image2"],
  editImage2R: ["editImage2R"],
  editableText9: ["editableText9", "text9", "editText9R"],
  text9: ["text9"],
  editText9R: ["editText9R"],
  iconValue2: [
    "iconValue2",
    "editableImage3",
    "image3",
    "editImage3R",
    "editableText10",
    "text10",
    "editText10R"
  ],
  editableImage3: ["editableImage3", "image3", "editImage3R"],
  image3: ["image3"],
  editImage3R: ["editImage3R"],
  editableText10: ["editableText10", "text10", "editText10R"],
  text10: ["text10"],
  editText10R: ["editText10R"],
  iconValue3: [
    "iconValue3",
    "editableImage4",
    "image4",
    "editImage4R",
    "editableText11",
    "text11",
    "editText11R"
  ],
  editableImage4: ["editableImage4", "image4", "editImage4R"],
  image4: ["image4"],
  editImage4R: ["editImage4R"],
  editableText11: ["editableText11", "text11", "editText11R"],
  text11: ["text11"],
  editText11R: ["editText11R"],
  squeezeC2CtaH1: ["squeezeC2CtaH1"],
  squeezeC2CtaH2: ["squeezeC2CtaH2"],
  watchers: ["watchers", "text12", "editText123"],
  text12: ["text12"],
  editText123: ["editText123"],
  text13: ["text13"],
  editText132: ["editText132"],
  image5: ["image5"],
  editImage52: ["editImage52"],
  text14: ["text14"],
  editText142: ["editText142"],
  text15: ["text15"],
  editText152: ["editText152"],
  text16: ["text16"],
  editText162: ["editText162"],
  text17: ["text17"],
  editText172: ["editText172"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  desktop: "div";
  columns: "div";
  editableLogoLogo: typeof Editable;
  logo: typeof PlasmicImg__;
  editImage53: typeof TextInput;
  editableText1: typeof Editable;
  text1: "div";
  editText1R: typeof TextInput;
  editableText2: typeof Editable;
  text2: "div";
  editText2R: typeof TextInput;
  editableText3: typeof Editable;
  text3: "div";
  editText3R: typeof TextInput;
  form: typeof FormWrapper;
  formField: typeof FormItemWrapper;
  input: typeof AntdInput;
  input2: typeof AntdInput;
  button: typeof AntdButton;
  squeezeC1Cta: "div";
  text4: typeof TextInput2;
  text5: typeof TextInput2;
  text6: typeof Button;
  editableText6: typeof Editable;
  editText6R: typeof TextInput;
  disclaimer: "div";
  editableImage1: typeof Editable;
  image1: typeof PlasmicImg__;
  editImage1R: typeof TextInput;
  editableText7: typeof Editable;
  text7: "div";
  editText7R: typeof TextInput;
  editableText8: typeof Editable;
  text8: "div";
  editText8R: typeof TextInput;
  iconValue1: "div";
  editableImage2: typeof Editable;
  image2: typeof PlasmicImg__;
  editImage2R: typeof TextInput;
  editableText9: typeof Editable;
  text9: "div";
  editText9R: typeof TextInput;
  iconValue2: "div";
  editableImage3: typeof Editable;
  image3: typeof PlasmicImg__;
  editImage3R: typeof TextInput;
  editableText10: typeof Editable;
  text10: "div";
  editText10R: typeof TextInput;
  iconValue3: "div";
  editableImage4: typeof Editable;
  image4: typeof PlasmicImg__;
  editImage4R: typeof TextInput;
  editableText11: typeof Editable;
  text11: "div";
  editText11R: typeof TextInput;
  squeezeC2CtaH1: "div";
  squeezeC2CtaH2: "div";
  watchers: "div";
  text12: "div";
  editText123: typeof TextInput;
  text13: "div";
  editText132: typeof TextInput;
  image5: typeof PlasmicImg__;
  editImage52: typeof TextInput;
  text14: "div";
  editText142: typeof TextInput;
  text15: "div";
  editText152: typeof TextInput;
  text16: "div";
  editText162: typeof TextInput;
  text17: "div";
  editText172: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueezeVariant2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueezeVariant2__VariantsArgs;
    args?: PlasmicSqueezeVariant2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSqueezeVariant2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSqueezeVariant2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSqueezeVariant2__ArgProps,
          internalVariantPropNames: PlasmicSqueezeVariant2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSqueezeVariant2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueezeVariant2";
  } else {
    func.displayName = `PlasmicSqueezeVariant2.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueezeVariant2 = Object.assign(
  // Top-level PlasmicSqueezeVariant2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    desktop: makeNodeComponent("desktop"),
    columns: makeNodeComponent("columns"),
    editableLogoLogo: makeNodeComponent("editableLogoLogo"),
    logo: makeNodeComponent("logo"),
    editImage53: makeNodeComponent("editImage53"),
    editableText1: makeNodeComponent("editableText1"),
    text1: makeNodeComponent("text1"),
    editText1R: makeNodeComponent("editText1R"),
    editableText2: makeNodeComponent("editableText2"),
    text2: makeNodeComponent("text2"),
    editText2R: makeNodeComponent("editText2R"),
    editableText3: makeNodeComponent("editableText3"),
    text3: makeNodeComponent("text3"),
    editText3R: makeNodeComponent("editText3R"),
    form: makeNodeComponent("form"),
    formField: makeNodeComponent("formField"),
    input: makeNodeComponent("input"),
    input2: makeNodeComponent("input2"),
    button: makeNodeComponent("button"),
    squeezeC1Cta: makeNodeComponent("squeezeC1Cta"),
    text4: makeNodeComponent("text4"),
    text5: makeNodeComponent("text5"),
    text6: makeNodeComponent("text6"),
    editableText6: makeNodeComponent("editableText6"),
    editText6R: makeNodeComponent("editText6R"),
    disclaimer: makeNodeComponent("disclaimer"),
    editableImage1: makeNodeComponent("editableImage1"),
    image1: makeNodeComponent("image1"),
    editImage1R: makeNodeComponent("editImage1R"),
    editableText7: makeNodeComponent("editableText7"),
    text7: makeNodeComponent("text7"),
    editText7R: makeNodeComponent("editText7R"),
    editableText8: makeNodeComponent("editableText8"),
    text8: makeNodeComponent("text8"),
    editText8R: makeNodeComponent("editText8R"),
    iconValue1: makeNodeComponent("iconValue1"),
    editableImage2: makeNodeComponent("editableImage2"),
    image2: makeNodeComponent("image2"),
    editImage2R: makeNodeComponent("editImage2R"),
    editableText9: makeNodeComponent("editableText9"),
    text9: makeNodeComponent("text9"),
    editText9R: makeNodeComponent("editText9R"),
    iconValue2: makeNodeComponent("iconValue2"),
    editableImage3: makeNodeComponent("editableImage3"),
    image3: makeNodeComponent("image3"),
    editImage3R: makeNodeComponent("editImage3R"),
    editableText10: makeNodeComponent("editableText10"),
    text10: makeNodeComponent("text10"),
    editText10R: makeNodeComponent("editText10R"),
    iconValue3: makeNodeComponent("iconValue3"),
    editableImage4: makeNodeComponent("editableImage4"),
    image4: makeNodeComponent("image4"),
    editImage4R: makeNodeComponent("editImage4R"),
    editableText11: makeNodeComponent("editableText11"),
    text11: makeNodeComponent("text11"),
    editText11R: makeNodeComponent("editText11R"),
    squeezeC2CtaH1: makeNodeComponent("squeezeC2CtaH1"),
    squeezeC2CtaH2: makeNodeComponent("squeezeC2CtaH2"),
    watchers: makeNodeComponent("watchers"),
    text12: makeNodeComponent("text12"),
    editText123: makeNodeComponent("editText123"),
    text13: makeNodeComponent("text13"),
    editText132: makeNodeComponent("editText132"),
    image5: makeNodeComponent("image5"),
    editImage52: makeNodeComponent("editImage52"),
    text14: makeNodeComponent("text14"),
    editText142: makeNodeComponent("editText142"),
    text15: makeNodeComponent("text15"),
    editText152: makeNodeComponent("editText152"),
    text16: makeNodeComponent("text16"),
    editText162: makeNodeComponent("editText162"),
    text17: makeNodeComponent("text17"),
    editText172: makeNodeComponent("editText172"),

    // Metadata about props expected for PlasmicSqueezeVariant2
    internalVariantProps: PlasmicSqueezeVariant2__VariantProps,
    internalArgProps: PlasmicSqueezeVariant2__ArgProps
  }
);

export default PlasmicSqueezeVariant2;
/* prettier-ignore-end */
